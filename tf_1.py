# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ta2sGaBW62mwpAVY1xIP1cLFar5dnR56

Importar tensorFlow
"""

import tensorflow as tf
print("TensorFlow version:", tf.__version__)

"""Cargar dataset-->mnist"""

mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

"""Crear un modelo de machine learning
crear un tf.keras.Sequential apilando capas:
"""

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])

"""Por ejemplo, el modelo devuelve un vector de logits o log-odds scores, para cada clase."""

predictions = model(x_train[:1]).numpy()
predictions

"""tf.nn.softmax --> convierte los logits a probabilidad"""

tf.nn.softmax(predictions).numpy()

"""definir funcion de perdidas-->devuelve un escalar"""

loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

"""la perdida es igual to the negative log probability de la clase true; la perdida es 0 si el modelo asegura la clase correcta."""

loss_fn(y_train[:1], predictions).numpy()

"""antes de empezar, se tiene que configurar y compilar el modelo usando Keras model.compile"""

model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])

"""Entrenar y evaluar el modelo;
usar el metodo model.fit para ajustar los parametros del modelo y minimizar las perdidas. 
"""

model.fit(x_train, y_train, epochs=5)

"""model.evaluate evalua el rendimiento del modelo, normalmente en un set de validacion o test."""

model.evaluate(x_test ,y_test, verbose=2)

"""El clasificador de imagenes esta estrenado al 97% de precision en el dataset mnist.

Si queremos que el modelo devuelva la probabilidad, podemos adjuntar el softmax al modelo entrenado.
"""

probability_model = tf.keras.Sequential([
  model,
  tf.keras.layers.Softmax()
])

probability_model(x_test[:5])

"""Conclusion

se ha entrenado un dataset usando la API de keras.
"""